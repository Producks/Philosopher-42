Functions:

memset, printf, malloc, free, write, fork, kill,
exit, pthread_create, pthread_detach, pthread_join,
usleep, gettimeofday, waitpid


Kill
Prototype:  int kill(pid_t pid, int sig);
Library: #include <signal.h>
Use for this project: TODO

Sem_open
Prototype:  sem_t *sem_open(const char *name, int oflag); or sem_t *sem_open(const char *name, int oflag,
                       mode_t mode, unsigned int value);
Library: #include <semaphore.h>
Use for this project: Create semaphore

Sem_close
Prototype:  int sem_close(sem_t *sem);
Library:  #include <semaphore.h>
Use for this project: Close the semaphore

Sem_post
Prototype:  int sem_post(sem_t *sem);
Library: #include <semaphore.h>
Use for this project: +1 to number of forks

Sem_wait
Prototype:   int sem_wait(sem_t *sem);
Library: #include <semaphore.h>
Use for this project: -1 to number of forks

Sem_unlink
Prototype:    int sem_unlink(const char *name);
Library: #include <semaphore.h>
Use for this project: TODO


The program of the bonus part takes the same arguments as the mandatory program.
It has to comply with the requirements of the Global rules chapter.
The specific rules for the bonus part are:
• All the forks are put in the middle of the table.
• They have no states in memory but the number of available forks is represented by
a semaphore.
• Each philosopher should be a process. But the main process should not be a
philosopher.
