Function notes:

Known use:printf, malloc, free, write

Memset
Prototype: void *memset(void *s, int c, size_t n);
Library: #include <string.h>
Use for this project: TODO

Usleep
Prototype: int usleep(useconds_t usec);
Library: #include <unistd.h
Use for this project: Make the philosopher sleep, suspend the execution of the calling thread for a specific
number of microseconds.
Extra note: Useconds_t is an unsigned integer, used for the argument of Usleep

Gettimeofday
Prototype: int gettimeofday(struct timeval *restrict tp, void *restrict tzp); (POSIX prototype)
Library: #include <sys/time.h>
Use: TODO

Pthread_create
Prototype: int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
Library: #include <pthread.h>
Use: TODO
Extra notes: Compile and link with -pthread.

Pthread_detach
Prototype: int pthread_detach(pthread_t thread);
Library: #include <pthread.h>
Use: TODO

Pthread_join
Prototype: int pthread_join(pthread_t thread, void **retval);
Library: #include <pthread.h>
Use: TODO

Pthread_mutex_init
Prototype: int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
Library: #include <pthread.h>
Use: Create mutex lock for forks and functions that will require a lock
Extra note: https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_init.html

Pthread_mutex_destroy
Prototype: int pthread_mutex_destroy(pthread_mutex_t *mutex); pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
Library: #include <pthread.h>
Use: Destroy the mutex that was created
Extra note: https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_init.html

Pthread_mutex_lock
Prototype: int pthread_mutex_lock(pthread_mutex_t *mutex);
Library: #include <pthread.h>
Use: Lock 
Extra note: https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_lock.html

Pthread_mutex_unlock
Prototype: int pthread_mutex_unlock(pthread_mutex_t *mutex);
Library: #include <pthread.h>
Use: TODO
Extra note: https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_mutex_lock.html


ARGS:
1:number_of_philosophers: The number of philosophers and also the number
of forks

2:time_to_die (in milliseconds): If a philosopher didnâ€™t start eating time_to_die
milliseconds since the beginning of their last meal or the beginning of the simulation, they die.

3:time_to_eat (in milliseconds): The time it takes for a philosopher to eat.
During that time, they will need to hold two forks.


4:number_of_times_each_philosopher_must_eat (optional argument): If all
philosophers have eaten at least number_of_times_each_philosopher_must_eat
times, the simulation stops. If not specified, the simulation stops when a
philosopher dies.


brew install kcachegrind

valgrind --tool=callgrind [executable name] [arguments]

200 410 200 100 10